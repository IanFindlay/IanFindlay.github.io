---
layout: post
title:  "Advent of Code 2020 - Day 02: Password Philosophy"
date:   2020-12-02 
categories: advent-of-code
tags: advent-of-code advent-of-code-2020 python
---

Ludicrous password requirements and an intriguing suggestion of a store
rivalry comprise this continuation of Advent of Code 2020.

### Part One

Find out about the store rivalry and the exact wording of the puzzle on the
[official page](https://adventofcode.com/2020/day/2), but here it is in brief:

> The relevant parts of each line of the input consists of a string (password),
a charcter and two numbers representing the minimum and maximum amount of times
that the character can be repeated in the password for it to be considered
valid; the number of these valid passwords in you puzzle input is the answer to
part one.

One of the examples given in the puzzle is:

`1-3 a: abcde`

For this to be valid there has to be at least 1 and no more than 3 of the
letter "a" in the password which is accurate in this case.

The only real complication in this puzzle is the initial parsing of the lines.
The format of each line is a little involved, you need to separate it into
four elements and there is no common delimiter, so the use of
**reg**ular **ex**pressions stood out to me as the 'right' solution.
That being said, I initially just unpacked the results of various splits as
whilst this isn't a complicated case regex rarely goes smoothly.

{% highlight python %}

with open ('input.txt', 'r') as password_database:
    lines = [line for line in password_database.readlines()]

valid_passwords = 0
for line in lines:
    policy, password = line.split(':')
    range_must_appear, character = policy.split(' ')
    lowest_repeat, highest_repeat = range_must_appear.split('-')
    char_count = password.count(character)
    if char_count >= int(lowest_repeat) and char_count <= int(highest_repeat):
        valid_passwords += 1

# Answer One
print("Number of valid passwords:", valid_passwords)

{% endhighlight %}

### Part Two

The shopkeeper's mistake is our part two as the policies actually need to be
interpreted differently:

> Rather than representing the range of acceptable occurrences of the
character the numbers indicate two positions within the password. One, **and
only one**, of these positions has to be the character.

Here's one of the examples given:

`2-9 c: ccccccccc`

This example is invalid as both characters at position 2 (index 1) and position
9 (index 8) are "c". The rest of the password is irrelevant.

This new criteria can easily be tested with a couple of AND statements after
the same parsing as above:

{% highlight python %}

if password[lowest_index] == char and password[highest_index] != char:
    valid_passwords += 1

elif password[lowest_index] != char and password[highest_index] == char:
    valid_passwords += 1

{% endhighlight %}

### A Regex Refactor

With my times posted on the scoreboard, though nowhere near the top and not
only because of my British timezone, I decided to combine both parts into one,
regex using loop. This required importing the re module, grouping parts of the
regex via brackets and assigning the variables by unpacking the tuple within
the list given by the re module's findall() function. Here is my final day
2 solution:

{% highlight python %}

import re

with open ('input.txt', 'r') as password_database:
    lines = [line for line in password_database.readlines()]

line_regex = re.compile('(\d*)-(\d*)\s(\w):\s(\w*)')
part_one_valid = 0
part_two_valid = 0
for line in lines:
    first_num, second_num, char, password = line_regex.findall(line)[0]
    first_num = int(first_num)
    second_num = int(second_num)

    # Part One
    char_count = password.count(char)
    if char_count >= first_num and char_count <= second_num:
        part_one_valid += 1

    # Part Two
    if password[first_num - 1] == char and password[second_num - 1] != char:
        part_two_valid += 1
    elif password[first_num - 1] != char and password[second_num - 1] == char:
        part_two_valid += 1

# Answer One
print("Number of valid passwords according to first policy:", part_one_valid)

# Answer Two
print("Number of valid passwords according to second policy:", part_two_valid)

{% endhighlight %}
