---
layout: post
title:  "Advent of Code 2020 - Day 04: Passport Processing"
date:   2020-12-04 
categories: advent-of-code
tags: advent-of-code advent-of-code-2020 python
---

Required fields, data validation and another bout of regex allows us to board
the airplane that is day 4.

### Part One

Within the [usual verbiage](https://adventofcode.com/2020/day/4) lies a rather
simple part one:

> Given a batch file of passports, comprised of fields and data, find how many
contain all of the required fields and are therefore valid.

The first slight complication for today's puzzle comes from parsing the batch
file as whilst the passports are clearly separated the number of fields per
line varies arbitrarily. I bypassed this parsing with regex, which is starting
to feel like a sub-theme this holiday season. Gathering the parsed fields for
each passport into a set and comparing it to a set containing all of the
required fields gives you the number of valid passports and today's first star:

{% highlight python %}

import re


with open ('input.txt', 'r') as batch_file:
    passports = [passport for passport in batch_file.read().split('\n\n')]

required_fields = {"byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid"}

valid = 0
passport_regex = re.compile('\w*:\.*')
for passport in passports:
    fields = set()
    for data in passport_regex.findall(passport):
        fields.add(data.split(':')[0])

    if required_fields - fields == set():
        valid += 1

# Answer One
print("Number of valid passports:", valid)

{% endhighlight %}

### Part Two

Of course, having the right fields does not a valid passport make and part two
can be, somewhat predictably, summarised as:

> Bring data validation to the passport booth's table with rules for each of
the required fields.

None of the rules are complicated but there were a couple of pitfalls
that almost made me miss the flight:

- The pid didn't have to start with a zero. The phrase 'leading zero' doesn't
mean there has to be a zero, only that it is padded with them. Had I looked
closely at the examples I would have saved myself a bit of trouble and a
few minutes of time.

- One pid problem down and another raised it's head due to my regex ring-rust.
Part of the pid validation is its length, specifying this length with [0-9]{9}
ensures it is **at least** 9 digits long but not, as I soon found out, that
it is **exactly** 9 digits long.

There's room for refinement in my part two (it feels more verbose than
necessary) but the functions work, it yields the right answer and here
it is with a refactored part one:

{% highlight python %}

import re


def validate_field(field: str, value: str) -> bool:
    if field == "byr" and validate_date_field(value, 1920, 2002):
        return True

    elif field == "iyr" and validate_date_field(value, 2010, 2020):
        return True

    elif field == "eyr" and validate_date_field(value, 2020, 2030):
        return True

    elif field == "hgt" and validate_height_field(value):
        return True

    elif field == "hcl" and validate_hair_field(value):
        return True

    elif field == "ecl" and validate_eye_field(value):
        return True

    elif field == "pid" and validate_pid_field(value):
        return True


def validate_date_field(value: str, min_date: int, max_date: int) -> bool:
    try:
        value = int(value)
    except ValueError:
        return False

    if value >= min_date and value <= max_date:
        return True
    else:
        return False


def validate_height_field(value: str,) -> bool:
    unit = value[-2:]
    if unit == "cm":
        height = value[:3]
    else:
        height = value[:2]

    try:
        height = int(height)
    except ValueError:
        return False

    if unit == "cm" and height >=150 and height <= 193:
        return True

    if unit == "in" and height >=59 and height <= 76:
        return True

    return False


def validate_hair_field(value: str) -> bool:
    hair_regex = re.compile('#{1}[0-9 a-f]{6}')
    if hair_regex.match(value):
        return True
    else:
        return False


def validate_eye_field(value: str) -> bool:
    if value in ['amb', 'blu', 'brn', 'gry', 'grn', 'hzl', 'oth']:
        return True
    else:
        return False


def validate_pid_field(value: str) -> bool:
    pid_regex = re.compile('[0-9]{9}')
    if pid_regex.match(value) and len(value) == 9:
        return True
    else:
        return False


with open ('input.txt', 'r') as batch_file:
    passports = [passport for passport in batch_file.read().split('\n\n')]

required_fields = {"byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid"}
valid = valid_and_verified = 0
passport_regex = re.compile('\w*:\S*')
for passport in passports:
    fields = set()
    verified_fields = set()
    for data in passport_regex.findall(passport):
        field, value = data.split(':')
        fields.add(field)
        if validate_field(field, value):
            verified_fields.add(field)

    if required_fields - fields == set():
        valid += 1

    if required_fields - verified_fields == set():
        valid_and_verified += 1

# Answer One
print("Number of valid passports:", valid)

# Answer Two
print("Number of valid, verified passwords:", valid_and_verified)

{% endhighlight %}
