---
layout: post
title:  "Advent of Code 2020 - Day 15: Rambunctious Recitation"
date:   2020-12-15 
categories: advent-of-code
tags: advent-of-code advent-of-code-2020 python
---

The elves are at it again, playing games while you do all of the work. This
sort of puzzle is my least favourite as it always amounts to translating
complex rules directly in to code rather than having to intuit or find the
rules that underlie a complex system. That being said, it was quick, painless
and gave me enough spare time to clean and refactor the code.

The ruleset can be found on
[the official page](https://adventofcode.com/2020/day/15) but here is how I
remember tackling the day's troubles:

### Part One - Quick but Far From Concise

This seemingly simple ruleset caused far more trouble than it should have. I
was perhaps too literal in my interpretation of the game from the offset
meaning that I held on to data I didn't need then had to code around this
chaff. Still here is take one of part one:

{% highlight python %}

starting_numbers = [11, 0, 1, 10, 5, 19]
spoken_dict = {}
spoken_set = set()
last_spoken = None
turn = 1
while turn <= 2020:

    if starting_numbers:
        number = starting_numbers[0]
        spoken_dict[number] = [turn]
        spoken_set.add(number)
        starting_numbers = starting_numbers[1:]

    else:
        if last_spoken not in spoken_set:
            number = 0
        else:
            if len(spoken_dict[last_spoken]) == 1:
                number = 0
            else:
                before_prev, prev = spoken_dict[last_spoken]
                number = prev - before_prev

        if number not in spoken_set:
            spoken_set.add(number)
            spoken_dict[number] = [turn]
        else:
            spoken_dict[number].append(turn)
            if len(spoken_dict[number]) == 3:
                spoken_dict[number] = spoken_dict[number][1:]

    last_spoken = number
    turn += 1

# Answer One
print("2020th Number spoken:", last_spoken)

{% endhighlight %}

I initialised the starting numbers into both a set, for fast, hashed checks of
whether or not a number has been spoken previously, and a dictionary keying the
number with the round it was last spoken in a list (come refactor time, I
improve this data structure but we shall leave that for the next section).

The game was then implemented much as it was written. I keep track of the value
that was spoken last and the values that have been spoken previously, look for
the inclusion of the last spoken value in the spoken_set and, if there, set the
next number to the difference between the turns they were spoken on.

That's the key impetus behind the implementation. There's mess here; hacks that
keep the dictionary lists at a maximum of two integers, as they are the only
relevant ones, and account for the difference between initialising a number
into the spoken_dict and modifying the list of a pre-existing entry. Much
(all?) of this is cleaned up in the refactor that came alongside...

## Part Two - Reuse then Refactor

Whilst I was by no means happy with the previous part my code was quick enough
for this part to be nothing more than:

> Replace the 2020 number with 30000000 and claim the next star

I did just that, ran the code whilst thinking of ways to make it more efficient
and then the answer popped out; The large number wasn't large enough it seems.
I think perhaps the lesson was for those few who kept all of the previous
rounds in memory. Regardless, the day ended with the code below and it isn't
all that often that 15 days into AoC I can boast "both stars and a refactor":

{% highlight python %}

starting_numbers = [11, 0, 1, 10, 5, 19]
spoken_dict = {}
spoken_set = set()
turn = 1

for number in starting_numbers[:-1]:
    spoken_dict[number] = turn
    spoken_set.add(number)
    turn += 1
last_spoken = starting_numbers[-1]

while turn < 30000000:

    if last_spoken not in spoken_set:
        number = 0
    else:
        number = turn - spoken_dict[last_spoken]

    spoken_dict[last_spoken] = turn
    spoken_set.add(last_spoken)

    if turn == 2020:
        # Answer One
        print("2020th Number spoken:", last_spoken)

    last_spoken = number
    turn += 1

# Answer Two
print("30000000th Number spoken:", last_spoken)

{% endhighlight %}

You should hopefully be able to see this code is, despite answering both parts,
far cleaner than the previous attempt - here's the two main (only?) changes:

- Instead of using the starting_numbers list as an inefficient, FIFO queue I
used it as the iterable it was born to be. This cleaned up the 'initialising'
phase far more than it sped it up, due to the fact the list was only 6 items
long, but it's a much welcomed aesthetic improvement.

- I realised that only the last turn that a number was spoken matters, as the
other component of the difference is simply the number of the previous turn.
This not only means I am no longer storing pointless information but makes the
management of the dictionary so much easier: gone are the branching
possibilities of how to modify an entry an in their stead stands a universally
applicable assignment.

## Overall

Today acts as a fairly reasonable summary of AoC so far: simple problems that
I may not have approached or implemented flawlessly but haven't particularly
struggled with either. Some years, by day 15 I had multiple heartbreaking
failures on my hands but a variety of new, hard won tricks up my sleeves; this
year I have more time to do other things but have learnt little... I'm not sure
how I feel about this yet but I shall discuss it in the 'day 26' AoC aftermath
article.
