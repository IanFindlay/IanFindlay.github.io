---
layout: post
title:  "Advent of Code 2020 - Day 03: Toboggan Trajectory"
date:   2020-12-02 
categories: advent-of-code
tags: advent-of-code advent-of-code-2020 python
---

Day three and we are off into the trees with a simple set of puzzles that
led to some satisfying refactoring.

### Part One

The period and hash map is a staple of AoC so before I even
[read the question](https://adventofcode.com/2020/day/3) I was
mentally parsing it into my preferred coordinate representation - a dictionary
with an (x, y) tuple for the key and the character for the value. As it turns
out, there was no need to modify any of the characters so a list of rows was
sufficient.

Which path finding algorithm will we use to traverse these trees? None - the
question is far simpler than that and here it is in brief:

> Given a slope, how far to move right and how far to move down on each step
of traversal, count the number of trees you hit on your way from the top left
of the map to beyond the final row.

A slight complication comes in the form of the maps horizontal repetition i.e.
the pattern of trees starts again at the first column should it go beyond the
right-hand edge. My solution to this is was to use modulus, based upon the
width of the map, to "move" back to the appropriate column on the map.

The slope in this case was given as right 3, down 1:

{% highlight python %}

with open ('input.txt', 'r') as password_database:
    rows = [line for line in password_database.readlines()]

index_of_last_row = len(rows) - 1
index_of_last_col = len(rows[0]) - 1

y = x = 0
trees = 0
while y <= index_of_last_row:
    if rows[y][x] == "#":
        trees += 1

    y += 1
    x = (x + 3) % index_of_last_col

# Answer One
print("Number of trees encountered on right 3 down 1 slope:", trees)

{% endhighlight %}

### Part Two

Punishing the hard coding of values instead of functions and variables is
common AoC feature and that's what part two felt like to me. It tasks you with:

> Doing the same as part one but for 5 (4 additional) slopes then taking the
product of the trees encountered on each run.

Usually, I'll keep the parts of a puzzle separated at first and save the
refactor for later, but part two was crying out for a function. The refactor
and part two solution stands below and speaks for themselves:

{%  highlight python %}

def count_trees_on_slope(area: list, right_step: int, down_step: int) -> int:
    """Return number of trees encounterd in area on slope (right/down step).
    Args:
        area: Rows of characters representing coordinates of a map.
        right_step: Amount to move to the right at each section of the slope.
        down_step: Amount to move down at each section of the slope.
    Returns:
        The number of trees ("#" characters) encountered before reaching past
        the last row of the area.
    """
    # Determine boundaries of the area
    index_of_last_row = len(area) - 1
    index_of_last_col = len(area[0]) - 1

    y = x = 0
    trees = 0
    while y <= index_of_last_row:
        if rows[y][x] == "#":
            trees += 1

        x = (x + right_step) % index_of_last_col
        y += down_step

    return trees


with open ('input.txt', 'r') as password_database:
    rows = [line for line in password_database.readlines()]

trees = count_trees_on_slope(rows, 3, 1)

# Answer One
print("Number of trees encountered on right 3 down 1 slope:", trees)

product_of_trees = trees
product_of_trees *= count_trees_on_slope(rows, 1, 1)
product_of_trees *= count_trees_on_slope(rows, 5, 1)
product_of_trees *= count_trees_on_slope(rows, 7, 1)
product_of_trees *= count_trees_on_slope(rows, 1, 2)

# Answer Two
print("Product of trees encountered on 5 different slopes:", product_of_trees)

{% endhighlight %}
