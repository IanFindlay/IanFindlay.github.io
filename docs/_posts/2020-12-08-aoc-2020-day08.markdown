---
layout: post
title:  "Advent of Code 2020 - Day 08: Handheld Halting"
date:   2020-12-08 
categories: advent-of-code
tags: advent-of-code advent-of-code-2020 python
---

Reminiscent of the intcode challenges of last year, day 8 sees a simple parse
then implement puzzle that offers little in terms of flexibility but seemingly
lays a solid foundation for future days.

As always, full verbiage can be found
on [the official page](https://adventofcode.com/2020/day/8) but here's what I
did:

### My Approach

Detecting an infinite loop is simple if the input is non-mutating i.e. doesn't
change and produces the same output/effect each time, and I chose to do so by
keeping track of which instructions had been run using a set and breaking out
of the program when an instruction was repeated.

The details of the operations are clearly spelt out within the problem itself,
so the only thing to note in my implementation of them is that I separated each
operation into its own function. This was more in anticipation of part two,
the operations becoming more complicated was a possible extension of this
puzzle, as the manipulation of the accumulator and next instruction could have
easily been done as part of the execution loop.

Part two wasn't as I anticipated. It was, in fact, far more interesting. You
are told that one instruction is corrupted and causing the infinite loop in the
boot code. That the affected operation is not an accumulator is given as is the
nature of the corruption: either a 'nop' has been changed into a 'jmp' or
vice versa. Thankfully, the argument remains the same.

I'm relatively happy with my approach - iterate through the instructions modifying
each 'jmp' or 'nop' in turn and running the resulting instructions until an
infinite loop is reached (modification failed to fix the problem) or the
instructions are run to completion (indicated by reaching an index greater
than the last instruction) - as it results in an easy-to-follow, readily
readable code but I feel like there must be a solution that forgoes
trial to exhaustion. Anyway, here is my current code (a speculative approach that
I may implement in the future can be found below it):

{% highlight python %}

def run_boot_code(instructions: list) -> tuple:
    """Run boot code in instructions list.
        Args:
            instructions: List of boot code instruction strings in the format
            "operation argument".
        Returns:
            Tuple of (accumulator, boolean). The boolean represents whether
            the code ran to completion - indicatd by trying to access an
            index beyond the instruction list - or not. The accumulator is the
            value of the accumulator at completion or, in the case of an
            infinite loop, prior to entering the loop.
    """
    accumulator = 0
    visited_indicies = set([0])
    current_index = 0
    while True:
        try:
            operation, argument = instructions[current_index].split()
        except IndexError:
            # Indicates program ran to completion
            return (accumulator, True)

        argument = int(argument)
        if operation == "acc":
            current_index += 1
            accumulator += argument
        elif operation == 'jmp':
            current_index += argument
        elif operation == 'nop':
            current_index += 1

        if current_index in visited_indicies:
            return (accumulator, False)
        visited_indicies.add(current_index)


with open ('inputs/day_08.txt', 'r') as boot_code:
    instructions = [instruction for instruction in boot_code.readlines()]

# Answer One
print("Value in the accumulator before infinite loop:",
      run_boot_code(instructions)[0])

current_index = 0
while True:
    operation, argument = instructions[current_index].split()
    if operation in ('jmp', 'nop'):
        mod_instructions = instructions.copy()
        if operation == 'jmp':
            mod_instructions[current_index] = "{} {}".format('nop', argument)
        elif operation == 'nop':
            mod_instructions[current_index] = "{} {}".format('jmp', argument)

        accumulator, program_fixed = run_boot_code(mod_instructions)
        if program_fixed:
            break

    current_index += 1

# Answer Two
print("Value of the accumulator after the program terminates:", accumulator)

{% endhighlight %}

### A Speculative Approach

I'm not entirely happy with my approach for two main reasons:

- Making copies of the instructions means a lot of lists are created and whilst
they aren't allowed to accumulate, as I overwrite the copy each time, this
feels intuitive but inefficient.

- No memoisation meaning identical boot code is run numerous times for no
functional reason.

The latter of these problems is easily resolved and if it wasn't for the
program running more than fast enough already, I would have probably done
it as part of my 'final' refactor; the former I think requires the more
substantial effort of a change of approach.

The idea that's floating around in my head uses the fact that
the end condition is known and the argument was not changed as part of the
corruption. If an instruction can be found that would end the program
successfully but is currently never reached, due to the infinite loop, then
the required modification can be found without having to run the boot code.

First, check the instruction in the index prior to this 'ending' instruction.
If it is a 'nop' or a 'acc' - instructions that lead to the next instruction
being executed - then make that the new 'ending' instruction and repeat the
search.

If a 'jmp' is found in this index - 1 position, changing to nop would solve
the problem. Make the modification, run the modified instructions and you
have your answer.

If you settle on a final 'ending' instruction, then iterating through the
instructions and comparing the argument to its offset from this target
instruction should reveal the 'nop' that was originally a 'jmp'.

I think this idea should work... I suppose I'll find out for sure if/when I
code it.
