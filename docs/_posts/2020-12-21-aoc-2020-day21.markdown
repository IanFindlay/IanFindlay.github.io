---
layout: post
title:  "Advent of Code 2020 - Day 21: Allergen Assessment"
date:   2020-12-21 
categories: advent-of-code
tags: advent-of-code advent-of-code-2020 python
---

As the weekend came to an end so to did the sudden revival of difficulty that
this year was lacking. With two (perhaps three) troublesome tasks behind us we
are given a simple but satisfying snack that seemed somewhat familiar.

For all of the ingredients to this one take a look at
[the official page](https://adventofcode.com/2020/day/21). As for this post,
let's move on from the entrÃ©e and get into the first course.

### Part One - Ambiguity is Not What I Ordered

The key detail for part one is that whilst the allergens may not always be
listed they are always associated with only one ingredient. This means that,
in a
[similar fashion to day 7](https://findlayian.com/advent-of-code/2020/12/07/aoc-2020-day07.html)
the answer can 'percolate' out of the input through successive loops; here's
the way it works:

- Allergens are assigned a set of the possible ingredients responsible
for it as determined by being mentioned on the same line.

- The ingredients list of any further lines that mention this allergen are then
intersected with this set, leaving only those ingredients that appear in both
foods and could therefore be uniquely responsible for the allergen.

- Once the input has been fully parsed in this way, a while True loop that
iterates through the allergens and their potential ingredients is run looking
for any allergens with only one potential ingredient.

- When found, this ingredient is added to a 'matched' set so that subsequent
allergen ingredients sets will not retain it as a possibility. This elimination
is done via taking the difference of the allergen set and the matched set.

- When the length of matched equals that of the number of allergens, all
allergens have been assigned their one ingredient and the loop is broken.

My code only works due to the conceit that assigning the first ingredient is
possible, as opposed to their being multiple choices, and that each subsequent
allergen will be pared down successfully due to a previous assignment. From the
description, this didn't have to be case but past experience meant that I
made the assumption and thankfully this time at least no asses were created
only the following code:

{% highlight python %}

with open('inputs/2020_21.txt') as f:
    rows = [line.strip() for line in f.readlines()]

allergens = {}
ingredients_list = []
for row in rows:
    ingredients, contains = row.split('(')
    ingredients = ingredients.split()
    ingredients_list.extend(ingredients)
    contains = [
            x.strip(',') for x in contains[:-1].split() if x != 'contains'
    ]
    for contained in contains:
        if contained not in allergens:
            allergens[contained] = set(ingredients)
        else:
            allergens[contained] = allergens[contained] & set(ingredients)

num_allergens = len(allergens)
matched = set()
while True:
    for allergen, ingredients in allergens.items():
        if len(ingredients) == 1:
            matched.update(ingredients)
            continue

        allergens[allergen] = allergens[allergen].difference(matched)

    if len(matched) == num_allergens:
        break

non_allergen = 0
for ingredient in ingredients_list:
    if ingredient not in matched:
        non_allergen += 1

# Answer One
print("Number of times non-allergen ingredients appear:", non_allergen)

{% endhighlight %}

A quick part one that left me with each allergen paired with its ingredient
and, unknown to me at the time, set me up for an almost insultingly trivial...


## Part Two - A Pre-emptive Solve

Punishment is often meted out in this section but today the ruler missed my
knuckles by a mile. Having already solved and stored the associations
between allergens and ingredients the following required a minute of coding
to complete:

> Arrange the allergen containing ingredients alphabetically by their allergen

Those who found some other way to work out the non-allergenic ingredients or
failed to go the extra step of associating allergen with ingredient may have
sighed at this one but, by the time they had finished, I was already holding
the second star of the day with the following code:

{% highlight python %}

dangerous_list = ''
for allergen in sorted(allergens):
    dangerous_list += allergens[allergen].pop() + ','

# Answer Two
print("Canonical dangerous ingredients list:", dangerous_list.strip(','))

{% endhighlight %}

You can
[check the Github page](https://github.com/IanFindlay/advent-of-code/blob/master/2020/day_21.py)
for the combined code. Whilst I changed my set operations from my preferred
'.operation' to symbols for the sake of line length nothing else of any note
has changed.

## Overall

Had this day not followed two that had me tearing my hair out, I may have been
a little bit disappointed in how easy these puzzles were now that we are so
close to the end; as it happens it did and I wasn't.
